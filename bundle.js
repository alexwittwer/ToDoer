(()=>{"use strict";var n={160:(n,t,e)=>{e.d(t,{Z:()=>d});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Exo+2&family=Poppins&family=Raleway&display=swap);"]),i.push([n.id,'* {\n  font-family: "Poppins";\n  padding: 0px;\n  margin: 0px;\n  line-height: 1.4;\n}\n\n:root {\n  --c1: #d6d6d6;\n  --c2: #ed7d31;\n  --c3: #6c5f5b;\n  --c4: #2d4356;\n  --c5: #add8e6;\n  --c6: rgb(157, 196, 48);\n}\n\n.body {\n  background-color: var(--c1);\n}\n\n.container {\n  background-color: var(--c1);\n  height: 100vh;\n  width: 100vw;\n  visibility: hidden;\n  animation: appear 0s 3s forwards;\n  display: grid;\n  grid-template-rows: 1fr 15fr 3fr;\n  grid-template-columns: max(240px, 15%) 85%;\n}\n\n/* --- Initial Load --- */\n.section-container-title {\n  display: flex;\n  font-size: 10rem;\n  animation: disappear 0s 3s forwards;\n  grid-column: 1/3;\n}\n\n.title-one {\n  animation: appear 0s 0s forwards;\n}\n\n.title-two {\n  animation: appear 0s 1s forwards;\n  visibility: hidden;\n}\n\n/* --- Header --- */\n\n.section-header {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  background-color: var(--c2);\n  gap: 16px;\n  min-height: 100%;\n  font-size: 18pt;\n  grid-column: 1/3;\n  grid-row: 1/2;\n  padding-left: 15px;\n}\n\n.section-header .logo {\n  max-height: 2rem;\n}\n\n/* --- Navigation --- */\n\n.nav-section {\n  grid-row: 2/3;\n  grid-column: 1/2;\n  margin-top: 2rem;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  flex: 0 0 auto;\n  padding-left: 15px;\n}\n\n.nav-item {\n  font-size: 24pt;\n  padding: 0px 20px;\n}\n\n.add-project-button {\n  margin-top: 40px;\n  padding: 1rem 3rem;\n  font-size: 20pt;\n  margin-top: 48px;\n  border-style: none;\n  background-color: var(--c4);\n  color: white;\n}\n\n.add-project-button:hover {\n  background-color: var(--c2);\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.nav-item:hover {\n  transition: 250ms;\n  background-color: var(--c2);\n  color: white;\n}\n\n.projects-nav {\n  display: flex;\n  flex-flow: column nowrap;\n  gap: 5px;\n}\n\n.projects-nav:hover {\n  inherits: none;\n}\n\n.projects-nav div {\n  padding-left: 1rem;\n  margin: 0.4rem;\n  font-size: 1.4rem;\n}\n\n.projects-nav div:hover {\n  background-color: var(--c5);\n  transition: 250ms;\n  color: black;\n  box-shadow: 2px 2px 0px 0px black;\n}\n\n/* --- Content --- */\n.content-section {\n  padding: 20px;\n  display: grid;\n  grid-template-rows: repeat(auto-fit, 6rem);\n  gap: 10px;\n  overflow-y: scroll;\n}\n\n.todo-item {\n  display: flex;\n  align-items: center;\n  grid-template-columns: repeat(5, 1fr);\n  background-color: var(--c2);\n  color: white;\n  padding: 12px;\n  height: 4rem;\n  min-width: 95%;\n  font-size: 1.2rem;\n  gap: 1rem;\n  justify-content: space-between;\n}\n\n/* description */\n.todo-item div:nth-child(2) {\n  max-height: 4rem;\n  width: 40ch;\n  overflow-y: scroll;\n}\n\n.todo-item:hover {\n  transition: 250ms;\n  box-shadow: 5px 5px 0px 0px black;\n}\n\n.todo-btn {\n  border: none;\n  background-color: var(--c4);\n  font-size: 2rem;\n  color: white;\n  width: 25rem;\n  margin: 1rem;\n  justify-self: center;\n}\n\n.edit-btn {\n  border: none;\n  background-color: var(--c4);\n  font-size: 1.2rem;\n  color: white;\n  width: 5rem;\n  padding: 1rem 0px;\n  margin: 1rem;\n  justify-self: center;\n}\n\n.edit-btn:hover {\n  background-color: var(--c5);\n  color: black;\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.todo-btn:hover {\n  background-color: var(--c2);\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.completed {\n  background-color: var(--c6);\n  color: black;\n}\n\n.completed:hover {\n  background-color: var(--c6);\n  color: black;\n}\n\n.action-btns {\n  display: flex;\n}\n\n.action-btns button {\n  margin: 3px;\n}\n\n/* --- Modals --- */\n\n.project-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  justify-content: center;\n  align-items: center;\n  gap: 4rem;\n  font-size: 1.5rem;\n}\n\n.project-modal label {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  gap: 2rem;\n}\n\n.project-modal input {\n  padding: 0.2rem;\n  line-height: 1.5rem;\n}\n\n.project-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.5rem;\n}\n\n.project-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.todo-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  gap: 1rem;\n  font-size: 1.4rem;\n}\n\n.todo-modal label input {\n  margin-left: 2rem;\n}\n\n.todo-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.4rem;\n}\n\n.todo-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.edit-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  gap: 1rem;\n  font-size: 1.4rem;\n}\n\n.edit-modal label input {\n  margin-left: 2rem;\n}\n\n.edit-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.4rem;\n}\n\n.edit-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.modal .close-btn {\n  position: absolute;\n  align-self: flex-end;\n  margin: 0px;\n  top: 0px;\n  right: 0px;\n  padding: 5px;\n}\n\n.modal .close-btn:hover {\n  box-shadow: none;\n  color: white;\n  background-color: rgb(160, 22, 22);\n}\n\n.hidden {\n  display: none;\n}\n\n/* --- Overflow styling --- */\n/* width */\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: var(--c1);\n  border-radius: 10px;\n}\n\n@keyframes appear {\n  to {\n    visibility: visible;\n  }\n}\n\n@keyframes disappear {\n  to {\n    display: none;\n  }\n}\n',"",{version:3,sources:["webpack://./src/input.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Exo+2&family=Poppins&family=Raleway&display=swap");\n\n* {\n  font-family: "Poppins";\n  padding: 0px;\n  margin: 0px;\n  line-height: 1.4;\n}\n\n:root {\n  --c1: #d6d6d6;\n  --c2: #ed7d31;\n  --c3: #6c5f5b;\n  --c4: #2d4356;\n  --c5: #add8e6;\n  --c6: rgb(157, 196, 48);\n}\n\n.body {\n  background-color: var(--c1);\n}\n\n.container {\n  background-color: var(--c1);\n  height: 100vh;\n  width: 100vw;\n  visibility: hidden;\n  animation: appear 0s 3s forwards;\n  display: grid;\n  grid-template-rows: 1fr 15fr 3fr;\n  grid-template-columns: max(240px, 15%) 85%;\n}\n\n/* --- Initial Load --- */\n.section-container-title {\n  display: flex;\n  font-size: 10rem;\n  animation: disappear 0s 3s forwards;\n  grid-column: 1/3;\n}\n\n.title-one {\n  animation: appear 0s 0s forwards;\n}\n\n.title-two {\n  animation: appear 0s 1s forwards;\n  visibility: hidden;\n}\n\n/* --- Header --- */\n\n.section-header {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  background-color: var(--c2);\n  gap: 16px;\n  min-height: 100%;\n  font-size: 18pt;\n  grid-column: 1/3;\n  grid-row: 1/2;\n  padding-left: 15px;\n}\n\n.section-header .logo {\n  max-height: 2rem;\n}\n\n/* --- Navigation --- */\n\n.nav-section {\n  grid-row: 2/3;\n  grid-column: 1/2;\n  margin-top: 2rem;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  flex: 0 0 auto;\n  padding-left: 15px;\n}\n\n.nav-item {\n  font-size: 24pt;\n  padding: 0px 20px;\n}\n\n.add-project-button {\n  margin-top: 40px;\n  padding: 1rem 3rem;\n  font-size: 20pt;\n  margin-top: 48px;\n  border-style: none;\n  background-color: var(--c4);\n  color: white;\n}\n\n.add-project-button:hover {\n  background-color: var(--c2);\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.nav-item:hover {\n  transition: 250ms;\n  background-color: var(--c2);\n  color: white;\n}\n\n.projects-nav {\n  display: flex;\n  flex-flow: column nowrap;\n  gap: 5px;\n}\n\n.projects-nav:hover {\n  inherits: none;\n}\n\n.projects-nav div {\n  padding-left: 1rem;\n  margin: 0.4rem;\n  font-size: 1.4rem;\n}\n\n.projects-nav div:hover {\n  background-color: var(--c5);\n  transition: 250ms;\n  color: black;\n  box-shadow: 2px 2px 0px 0px black;\n}\n\n/* --- Content --- */\n.content-section {\n  padding: 20px;\n  display: grid;\n  grid-template-rows: repeat(auto-fit, 6rem);\n  gap: 10px;\n  overflow-y: scroll;\n}\n\n.todo-item {\n  display: flex;\n  align-items: center;\n  grid-template-columns: repeat(5, 1fr);\n  background-color: var(--c2);\n  color: white;\n  padding: 12px;\n  height: 4rem;\n  min-width: 95%;\n  font-size: 1.2rem;\n  gap: 1rem;\n  justify-content: space-between;\n}\n\n/* description */\n.todo-item div:nth-child(2) {\n  max-height: 4rem;\n  width: 40ch;\n  overflow-y: scroll;\n}\n\n.todo-item:hover {\n  transition: 250ms;\n  box-shadow: 5px 5px 0px 0px black;\n}\n\n.todo-btn {\n  border: none;\n  background-color: var(--c4);\n  font-size: 2rem;\n  color: white;\n  width: 25rem;\n  margin: 1rem;\n  justify-self: center;\n}\n\n.edit-btn {\n  border: none;\n  background-color: var(--c4);\n  font-size: 1.2rem;\n  color: white;\n  width: 5rem;\n  padding: 1rem 0px;\n  margin: 1rem;\n  justify-self: center;\n}\n\n.edit-btn:hover {\n  background-color: var(--c5);\n  color: black;\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.todo-btn:hover {\n  background-color: var(--c2);\n  box-shadow: 5px 5px 0px black;\n  transition: 250ms;\n}\n\n.completed {\n  background-color: var(--c6);\n  color: black;\n}\n\n.completed:hover {\n  background-color: var(--c6);\n  color: black;\n}\n\n.action-btns {\n  display: flex;\n}\n\n.action-btns button {\n  margin: 3px;\n}\n\n/* --- Modals --- */\n\n.project-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  justify-content: center;\n  align-items: center;\n  gap: 4rem;\n  font-size: 1.5rem;\n}\n\n.project-modal label {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  gap: 2rem;\n}\n\n.project-modal input {\n  padding: 0.2rem;\n  line-height: 1.5rem;\n}\n\n.project-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.5rem;\n}\n\n.project-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.todo-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  gap: 1rem;\n  font-size: 1.4rem;\n}\n\n.todo-modal label input {\n  margin-left: 2rem;\n}\n\n.todo-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.4rem;\n}\n\n.todo-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.edit-modal {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-flow: column nowrap;\n  background-color: var(--c4);\n  padding: 40px;\n  color: white;\n  gap: 1rem;\n  font-size: 1.4rem;\n}\n\n.edit-modal label input {\n  margin-left: 2rem;\n}\n\n.edit-modal button {\n  border: none;\n  padding: 1rem;\n  background-color: var(--c2);\n  color: white;\n  font-size: 1.4rem;\n}\n\n.edit-modal button:hover {\n  background-color: var(--c5);\n  color: black;\n  transition: 250ms;\n  box-shadow: 5px 5px 0px black;\n}\n\n.modal .close-btn {\n  position: absolute;\n  align-self: flex-end;\n  margin: 0px;\n  top: 0px;\n  right: 0px;\n  padding: 5px;\n}\n\n.modal .close-btn:hover {\n  box-shadow: none;\n  color: white;\n  background-color: rgb(160, 22, 22);\n}\n\n.hidden {\n  display: none;\n}\n\n/* --- Overflow styling --- */\n/* width */\n::-webkit-scrollbar {\n  width: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: var(--c1);\n  border-radius: 10px;\n}\n\n@keyframes appear {\n  to {\n    visibility: visible;\n  }\n}\n\n@keyframes disappear {\n  to {\n    display: none;\n  }\n}\n'],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var s=[].concat(n[l]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),e&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=e):s[2]=e),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],d=0;d<n.length;d++){var c=n[d],l=r.base?c[0]+r.base:c[0],s=a[l]||0,u="".concat(l," ").concat(s);a[l]=s+1;var A=e(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var p=o(m,r);r.byIndex=d,t.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=e(a[i]);t[d].references--}for(var c=r(n,o),l=0;l<a.length;l++){var s=e(a[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),i=e.n(a),d=e(565),c=e.n(d),l=e(216),s=e.n(l),u=e(589),A=e.n(u),m=e(160),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=s(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;class h{constructor(n="New Project",...t){this.project=n,this.todos=[...t]}add(n){if(!(n instanceof f))throw new Error("Error: argument is not a Todo item");this.todos.push(n)}delete(n){if(!(n instanceof f))throw new Error("Error: argument is not a Todo item");{const t=this.todos.indexOf(n);if(-1===t)throw new Error("Error: argument is not in Todo list");this.todos.splice(t,1)}}}class f{constructor(n="New todoer",t="Add a description",e="High",r=new Date,o=crypto.randomUUID()){this.title=n,this.description=t,this.priority=this.checkPriority(e),this.due=r,this.completed=!1,this.todoID=o}updateTodoStrings(n,t){if("string"!=typeof n||"string"!=typeof t)throw null===n||null===t?new Error("Invalid arguments for updateTodoStrings"):new Error("Cannot add non-strings to title and description");this.title=n,this.description=t}changePriority(n){this.priority="High"===n?"Low":"High"}checkPriority(n){return!0===n?"High":"Low"}markCompleted(){!1===this.completed?this.completed=!0:this.completed=!1}edit(n=null,t=null,e=null,r=null){this.title=n,this.description=t,this.due=e,this.priority=this.checkPriority(r)}}function g(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function C(n){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},C(n)}function b(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function E(n){b(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===C(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n,t){return b(2,arguments),function(n,t){b(2,arguments);var e=E(n),r=g(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}(n,7*g(t))}function w(n,t){b(2,arguments);var e=E(n).getTime(),r=E(t.start).getTime(),o=E(t.end).getTime();if(!(r<=o))throw new RangeError("Invalid interval");return e>=r&&e<=o}function B(n){b(1,arguments);var t=E(n),e=t.getUTCDay(),r=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function y(n){b(1,arguments);var t=E(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var o=B(r),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var i=B(a);return t.getTime()>=o.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}var x={};function k(){return x}function T(n,t){var e,r,o,a,i,d,c,l;b(1,arguments);var s=k(),u=g(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:s.weekStartsOn)&&void 0!==r?r:null===(c=s.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==e?e:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=E(n),m=A.getUTCDay(),p=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-p),A.setUTCHours(0,0,0,0),A}function S(n,t){var e,r,o,a,i,d,c,l;b(1,arguments);var s=E(n),u=s.getUTCFullYear(),A=k(),m=g(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(c=A.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,m),p.setUTCHours(0,0,0,0);var h=T(p,t),f=new Date(0);f.setUTCFullYear(u,0,m),f.setUTCHours(0,0,0,0);var C=T(f,t);return s.getTime()>=h.getTime()?u+1:s.getTime()>=C.getTime()?u:u-1}function D(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const Y=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return D("yy"===t?r%100:r,t.length)},M=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):D(e+1,2)},j=function(n,t){return D(n.getUTCDate(),t.length)},P=function(n,t){return D(n.getUTCHours()%12||12,t.length)},L=function(n,t){return D(n.getUTCHours(),t.length)},U=function(n,t){return D(n.getUTCMinutes(),t.length)},W=function(n,t){return D(n.getUTCSeconds(),t.length)},N=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return D(Math.floor(r*Math.pow(10,e-3)),t.length)};var z={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),o=r>0?r:1-r;return e.ordinalNumber(o,{unit:"year"})}return Y(n,t)},Y:function(n,t,e,r){var o=S(n,r),a=o>0?o:1-o;return"YY"===t?D(a%100,2):"Yo"===t?e.ordinalNumber(a,{unit:"year"}):D(a,t.length)},R:function(n,t){return D(y(n),t.length)},u:function(n,t){return D(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return D(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return M(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var o=function(n,t){b(1,arguments);var e=E(n),r=T(e,t).getTime()-function(n,t){var e,r,o,a,i,d,c,l;b(1,arguments);var s=k(),u=g(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:s.firstWeekContainsDate)&&void 0!==r?r:null===(c=s.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==e?e:1),A=S(n,t),m=new Date(0);return m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0),T(m,t)}(e,t).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):D(o,t.length)},I:function(n,t,e){var r=function(n){b(1,arguments);var t=E(n),e=B(t).getTime()-function(n){b(1,arguments);var t=y(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),B(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):D(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):j(n,t)},D:function(n,t,e){var r=function(n){b(1,arguments);var t=E(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=e-t.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):D(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return D(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return D(a,t.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return D(o,t.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return P(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):L(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):D(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):U(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):W(n,t)},S:function(n,t){return N(n,t)},X:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return O(o);case"XXXX":case"XX":return H(o);default:return H(o,":")}},x:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return O(o);case"xxxx":case"xx":return H(o);default:return H(o,":")}},O:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+q(o,":");default:return"GMT"+H(o,":")}},z:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+q(o,":");default:return"GMT"+H(o,":")}},t:function(n,t,e,r){var o=r._originalDate||n;return D(Math.floor(o.getTime()/1e3),t.length)},T:function(n,t,e,r){return D((r._originalDate||n).getTime(),t.length)}};function q(n,t){var e=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return e+String(o);var i=t||"";return e+String(o)+i+D(a,2)}function O(n,t){return n%60==0?(n>0?"-":"+")+D(Math.abs(n)/60,2):H(n,t)}function H(n,t){var e=t||"",r=n>0?"-":"+",o=Math.abs(n);return r+D(Math.floor(o/60),2)+e+D(o%60,2)}const Z=z;var F=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Q=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const I={p:Q,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return F(n,t);switch(o){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",F(o,t)).replace("{{time}}",Q(a,t))}};var R=["D","DD"],X=["YY","YYYY"];function G(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function _(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const V={date:_({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:_({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:_({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var $={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,d=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[d]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const nn={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function tn(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,d=a[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(c)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(d))return e}(c):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(d))return e}(c);return i=n.valueCallback?n.valueCallback(l):l,{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(d.length)}}}var en,rn={ordinalNumber:(en={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(en.matchPattern);if(!e)return null;var r=e[0],o=n.match(en.parsePattern);if(!o)return null;var a=en.valueCallback?en.valueCallback(o[0]):o[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(r.length)}}),era:tn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:tn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:tn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:tn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:tn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const on={code:"en-US",formatDistance:function(n,t,e){var r,o=J[n];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:V,formatRelative:function(n,t,e,r){return $[n]},localize:nn,match:rn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var an=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,dn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,cn=/^'([^]*?)'?$/,ln=/''/g,sn=/[a-zA-Z]/;function un(n,t,e){var r,o,a,i,d,c,l,s,u,A,m,p,h,f,v,w,B,y;b(2,arguments);var x=String(t),T=k(),S=null!==(r=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:on,D=g(null!==(a=null!==(i=null!==(d=null!==(c=null==e?void 0:e.firstWeekContainsDate)&&void 0!==c?c:null==e||null===(l=e.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==d?d:T.firstWeekContainsDate)&&void 0!==i?i:null===(u=T.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var Y=g(null!==(m=null!==(p=null!==(h=null!==(f=null==e?void 0:e.weekStartsOn)&&void 0!==f?f:null==e||null===(v=e.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==h?h:T.weekStartsOn)&&void 0!==p?p:null===(B=T.locale)||void 0===B||null===(y=B.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==m?m:0);if(!(Y>=0&&Y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var M=E(n);if(!function(n){if(b(1,arguments),!function(n){return b(1,arguments),n instanceof Date||"object"===C(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=E(n);return!isNaN(Number(t))}(M))throw new RangeError("Invalid time value");var j=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(M),P=function(n,t){return b(2,arguments),function(n,t){b(2,arguments);var e=E(n).getTime(),r=g(t);return new Date(e+r)}(n,-g(t))}(M,j),L={firstWeekContainsDate:D,weekStartsOn:Y,locale:S,_originalDate:M},U=x.match(dn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,I[t])(n,S.formatLong):n})).join("").match(an).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return function(n){var t=n.match(cn);return t?t[1].replace(ln,"'"):n}(r);var a,i=Z[o];if(i)return null!=e&&e.useAdditionalWeekYearTokens||(a=r,-1===X.indexOf(a))||G(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==R.indexOf(n)}(r)||G(r,t,String(n)),i(P,r,S.localize,L);if(o.match(sn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return U}function An(n){for(;n.firstElementChild;)n.removeChild(n.firstElementChild)}function mn(){document.querySelector(".edit-modal").classList.toggle("hidden")}function pn(){document.querySelector(".todo-modal").classList.toggle("hidden")}function hn(n,t){const e=document.createElement("div");e.textContent=n.project,e.addEventListener("click",(t=>{gn(n),document.querySelector(".todo-modal").remove(),document.body.appendChild(Cn(n))})),t.appendChild(e)}function fn(n){n.classList.toggle("hidden")}function gn(n){const t=document.querySelector(".content-section");An(t),function(n){const t=document.createElement("button");t.textContent="Create new ToDoer",t.classList.add("todo-btn"),t.addEventListener("click",(n=>{pn()})),n.appendChild(t)}(t),void 0!==n.todos&&n.todos.forEach((e=>{t.appendChild(En(e,n))}))}function Cn(n){const t=document.createElement("form"),e=document.createElement("label"),r=document.createElement("input"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("label"),d=document.createElement("input"),c=document.createElement("label"),l=document.createElement("input"),s=document.createElement("button");s.type="button",t.setAttribute("action",""),t.classList.add("modal","todo-modal","hidden"),r.setAttribute("type","text"),r.setAttribute("name","Todoer title"),r.setAttribute("id","title"),d.setAttribute("type","checkbox"),d.setAttribute("name","priority"),d.setAttribute("id","taskpriority"),l.setAttribute("type","date"),l.setAttribute("name","Due date"),l.setAttribute("id","due"),a.setAttribute("type","text"),a.setAttribute("name","task description"),a.setAttribute("id","taskdesc"),o.textContent="Description",e.textContent="ToDoer title",i.textContent="Check for high priority",c.textContent="Date due",s.textContent="Add new ToDoer",e.appendChild(r),o.appendChild(a),i.appendChild(d),c.appendChild(l),s.addEventListener("click",(t=>{t.preventDefault(),function(n,t){t.add(n)}(new f(r.value,a.value,d.checked,new Date(l.value)),n),gn(n),function(n){localStorage.setItem(n.project,JSON.stringify(n))}(n),pn()}));const u=document.createElement("button");return u.classList.add("close-btn"),u.textContent="X",u.addEventListener("click",(n=>{n.preventDefault(),pn()})),t.appendChild(u),t.appendChild(e),t.appendChild(o),t.appendChild(i),t.appendChild(c),t.appendChild(s),t}function bn(n,t){const e=document.createElement("form"),r=document.createElement("label"),o=document.createElement("input"),a=document.createElement("label"),i=document.createElement("input"),d=document.createElement("label"),c=document.createElement("input"),l=document.createElement("label"),s=document.createElement("input"),u=document.createElement("button");u.type="button",e.setAttribute("action",""),e.classList.add("modal","edit-modal","hidden"),o.setAttribute("type","text"),o.setAttribute("name","Todoer title"),o.setAttribute("id","title-edit"),c.setAttribute("type","checkbox"),c.setAttribute("name","priority"),c.setAttribute("id","taskpriority-edit"),s.setAttribute("type","date"),s.setAttribute("name","Due date"),s.setAttribute("id","due-edit"),i.setAttribute("type","text"),i.setAttribute("name","task description"),i.setAttribute("id","taskdesc-edit"),a.textContent="Description",r.textContent="ToDoer title",d.textContent="Check for high priority",l.textContent="Date due",u.textContent="Submit changes",r.appendChild(o),a.appendChild(i),d.appendChild(c),l.appendChild(s),u.addEventListener("click",(e=>{t?(t.edit(o.value,i.value,new Date(s.value),c.value),gn(n),mn()):console.error("currentTodo is null or undefined")}));const A=document.createElement("button");return A.classList.add("close-btn"),A.textContent="X",A.addEventListener("click",(n=>{n.preventDefault(),mn()})),e.appendChild(A),e.appendChild(r),e.appendChild(a),e.appendChild(d),e.appendChild(l),e.appendChild(u),e}function En(n,t){const e=document.createElement("div"),r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("input"),c=document.createElement("label"),l=crypto.randomUUID(),s=document.createElement("button"),u=document.createElement("button"),A=document.createElement("div");return d.type="checkbox",d.id=l,c.setAttribute("for",l),c.textContent="Mark Complete: ",c.appendChild(d),e.classList.add("todo-item"),n.completed&&e.classList.add("completed"),r.textContent=n.title,o.textContent=n.description,a.textContent="Priority: "+n.priority,i.textContent="Due: "+un(n.due,"MM/dd/yyyy"),d.checked=n.completed,d.addEventListener("click",(t=>{e.classList.toggle("completed"),n.markCompleted()})),s.textContent="Edit",s.classList.add("edit-btn"),s.addEventListener("click",(e=>{document.querySelector(".edit-modal").remove(),document.body.appendChild(bn(t,n)),mn()})),u.textContent="Delete",u.classList.add("edit-btn","delete-btn"),u.addEventListener("click",(e=>{t.delete(n),gn(t)})),A.classList.add("action-btns"),null!=t&&(A.appendChild(s),A.appendChild(u)),[r,o,a,i,c,A].forEach((n=>{n.classList.add("todo-param"),e.appendChild(n)})),e}const vn=e.p+"bb714a00d9442885d710.svg",wn=document.querySelector(".container"),Bn=document.createElement("div"),yn=function(){if(!document.querySelector(".content-section")){const n=document.createElement("section");return n.classList.add("content-section"),n}}();document.body.appendChild(Bn);let xn=function(){const n=[];return Object.keys(localStorage).forEach((t=>{const e=localStorage.getItem(t),r=JSON.parse(e),o=r.todos.map((n=>new f(n.title,n.description,n.priority,new Date(n.due)))),a=new h(r.project,...o);n.push(a)})),n}();console.log(xn),wn.appendChild(function(n){const t=document.createElement("form"),e=document.createElement("label"),r=document.createElement("input"),o=document.createElement("button");t.setAttribute("action",""),t.classList.add("modal","project-modal","hidden"),r.setAttribute("type","text"),r.setAttribute("name","Project title"),r.setAttribute("id","projectTitle"),r.required=!0,e.setAttribute("for","projectTitle"),e.textContent="ToDoer title",e.appendChild(r),o.setAttribute("type","button"),o.textContent="Add Project",o.addEventListener("click",(e=>{const o=document.querySelector(".projects-nav");fn(t),An(o);const a=new h(r.value);n.push(a),n.forEach((n=>{hn(n,o)}))}));const a=document.createElement("button");return a.classList.add("close-btn"),a.textContent="X",a.addEventListener("click",(n=>{n.preventDefault(),fn(t)})),t.appendChild(a),t.appendChild(e),t.appendChild(o),t}(xn)),wn.appendChild(Cn(null)),Bn.appendChild(bn(null,null)),wn.appendChild(function(){const n=document.createElement("div"),t=document.createElement("h1"),e=document.createElement("h1");return n.classList.add("section-container-title"),t.classList.add("title","title-one"),e.classList.add("title","title-two"),t.textContent="To",e.textContent="Doer//",n.appendChild(t),n.appendChild(e),n}()),wn.appendChild(function(){const n=document.createElement("header"),t=document.createElement("h3"),e=new Image;return t.textContent="ToDoer //",e.src=vn,e.classList.add("logo"),n.classList.add("section-header"),t.classList.add("app-title"),n.appendChild(t),n.appendChild(e),n}()),wn.appendChild(function(n){const t=document.createElement("section"),e=document.createElement("nav"),r=document.createElement("nav"),o=document.createElement("section"),a=document.createElement("button"),i=[e,r,o],d=[e,r,o,a];return t.classList.add("nav-section"),i.forEach((n=>{n.classList.add("nav-item")})),a.classList.add("add-project-button"),o.classList.add("projects-nav"),e.textContent="This week",r.textContent="Next week",o.textContent="Projects",a.textContent="Add project",e.classList.add("this-week"),r.classList.add("next-week"),e.addEventListener("click",(()=>{const t=document.querySelector(".content-section");An(t),function(n){const t=new Date;t.setDate(t.getDate()-1);const e=v(new Date,1),r=[];return n.forEach((n=>{n.todos.forEach((n=>{w(n.due,{start:t,end:e})&&r.push(n)}))})),r}(n).forEach((n=>{const e=En(n,null);t.appendChild(e)}))})),r.addEventListener("click",(()=>{const t=document.querySelector(".content-section");An(t),function(n){const t=new Date,e=v(t,1),r=v(t,2),o=[];return n.forEach((n=>{n.todos.forEach((n=>{w(new Date(n.due),{start:e,end:r})&&o.push(n)}))})),o}(n).forEach((n=>{const e=En(n,null);t.appendChild(e)}))})),a.addEventListener("click",(n=>{const t=document.querySelector(".project-modal");n.preventDefault(),t.classList.toggle("hidden")})),d.forEach((n=>{t.appendChild(n)})),n&&n.forEach((n=>{hn(n,o)})),t}(xn)),wn.appendChild(yn),wn.addEventListener("click",(n=>{var t;t=xn,localStorage.clear(),t.forEach((n=>{localStorage.setItem(n.project,JSON.stringify(n))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,